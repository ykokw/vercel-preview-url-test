name: Playwright Tests
on:
  workflow_dispatch:
  issue_comment:
    types: [created]
#  push:
#    branches: [main]
#  pull_request_target:
#    branches: [main]
#    types:
#      - opened
#      - reopened
#      - synchronize

jobs:
  find-vercel-preview-url:
    timeout-minutes: 5
    name: Find Vercel Preview URL
    runs-on: ubuntu-latest
    outputs:
      vercel_preview_url: "https://${{ steps.find-vercel-preview-url.outputs.preview_url }}"
      latest_commit_sha: ${{ steps.set_latest_commit_sha.outputs.latest_commit_sha }}
    if: |
      github.event_name == 'pull_request_target' ||
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'issue_comment' && github.event.issue.pull_request && contains(github.event.comment.body, '.run-ui-test')
    steps:
      - name: Get PR details
        id: get_pr_details
        uses: octokit/request-action@v2.x
        if: github.event_name == 'issue_comment' && github.event.issue.pull_request && contains(github.event.comment.body, '.run-ui-test')
        with:
          route: GET /repos/${{ github.repository }}/pulls/${{ github.event.issue.number }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Set latest commit SHA
        if: github.event_name == 'issue_comment' && github.event.issue.pull_request && contains(github.event.comment.body, '.run-ui-test')
        id: set_latest_commit_sha
        run: echo "latest_commit_sha=${{ fromJson(steps.get_pr_details.outputs.data).head.sha }}" >> "$GITHUB_OUTPUT"
      - name: Set env for search Preview Deployment URL
        if: steps.get_pr_details.conclusion == 'success'
        run: echo "SEARCH_BRANCH_NAME=${{ fromJson(steps.get_pr_details.outputs.data).head.ref }}" >> $GITHUB_ENV
      - name: Find Vercel Preview URL
        uses: zentered/vercel-preview-url@v1.4.0
        id: find-vercel-preview-url
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        with:
          vercel_team_id: ${{ secrets.VERCEL_ORG_ID }}
          vercel_project_id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel_limit: 50
          vercel_state: READY
  test:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    needs: [find-vercel-preview-url]
    if: ${{ needs.find-vercel-preview-url.outputs.vercel_preview_url != '' }}
    env:
      VERCEL_PROTECTION_BYPASS: ${{ secrets.VERCEL_PROTECTION_BYPASS }}
      UI_TEST_TARGET_URL: ${{ needs.find-vercel-preview-url.outputs.vercel_preview_url }}
    permissions:
      pull-requests: write
      checks: write
    steps:
      # - name: Set in progress commit status
      #   uses: actions/github-script@v7
      #   id: set-in-progress-status
      #   if: github.event_name == 'issue_comment' && github.event.issue.pull_request && contains(github.event.comment.body, '.run-ui-test')
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       github.rest.checks.create({
      #         name: 'Playwright test',
      #         head_sha: '${{ needs.find-vercel-preview-url.outputs.latest_commit_sha }}',
      #         status: 'in_progress',
      #         owner: context.repo.owner,
      #         repo: context.repo.repo
      #       })
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Install dependencies
        run: npm ci
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
      - name: Run Playwright tests
        id: tests-step
        run: npx playwright test
      - name: Comment test results to PR
        uses: daun/playwright-report-summary@v3
        if: |
          github.event_name == 'pull_request_target' ||
          github.event_name == 'issue_comment' && github.event.issue.pull_request && contains(github.event.comment.body, '.run-ui-test')
        with:
          report-file: test-results.json
      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
      - name: Set success commit status
        uses: actions/github-script@v7
        id: set-success-status
        if: github.event_name == 'issue_comment' && github.event.issue.pull_request && contains(github.event.comment.body, '.run-ui-test') && steps.tests-step.outcome == 'success'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.checks.create({
              name: 'Playwright test',
              head_sha: '${{ needs.find-vercel-preview-url.outputs.latest_commit_sha }}',
              status: 'completed',
              conclusion: '${{ steps.tests-step.outcome }}',
              output: {
                title: 'Playwright test',
                summary: 'Results: ${{ steps.tests-step.outcome }}'
              },
              owner: context.repo.owner,
              repo: context.repo.repo
            })
      - name: Get success result
        if: github.event_name == 'issue_comment' && github.event.issue.pull_request && contains(github.event.comment.body, '.run-ui-test') && steps.tests-step.outcome == 'success'
        run: echo "${{steps.set-success-status.outputs.result}}"
      - name: Set failed commit status
        uses: actions/github-script@v7
        id: set-failure-status
        if: github.event_name == 'issue_comment' && github.event.issue.pull_request && contains(github.event.comment.body, '.run-ui-test') && steps.tests-step.outcome == 'failure'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.checks.create({
              name: 'Playwright test',
              head_sha: '${{ needs.find-vercel-preview-url.outputs.latest_commit_sha }}',
              status: 'completed',
              conclusion: '${{ steps.tests-step.outcome }}',
              output: {
                title: 'Playwright test',
                summary: 'Results: ${{ steps.tests-step.outcome }}'
              },
              owner: context.repo.owner,
              repo: context.repo.repo
            })
      - name: Get success result
        if: github.event_name == 'issue_comment' && github.event.issue.pull_request && contains(github.event.comment.body, '.run-ui-test') && steps.tests-step.outcome == 'failure'
        run: echo "${{steps.set-failure-status.outputs.result}}"
